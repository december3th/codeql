extensions:

  # An incomplete set of sources database reads
  - addsTo:
      pack: codeql/java-all
      extensible: sinkModel
    data:
      - ["java.io", "OutputStream", True, "write", "(byte[])", "", "Argument[0]", "sql", "manual"]
      - ["java.io", "OutputStream", True, "write", "(byte[],int,int)", "", "Argument[0]", "sql", "manual"]
      - ["java.io", "OutputStream", True, "write", "(int)", "", "Argument[0]", "sql", "manual"]


  - addsTo:
      pack: codeql/java-all
      extensible: sourceModel
    data:
      # Create a few
      # Package java.sql
      - ["java.sql", "PreparedStatement", True, "executeQuery", "()", "", "ReturnValue", "database", "manual"]
      - ["java.sql", "PreparedStatement", True, "getMetaData", "()", "", "ReturnValue", "database", "manual"]
      - ["java.sql", "PreparedStatement", True, "getParameterMetaData", "", "", "ReturnValue", "database", "manual"]
      - ["java.sql", "Statement", True, "executeQuery", "(String)", "", "ReturnValue", "database", "manual"]
      - ["java.sql", "Statement", True, "getResultSet", "()", "", "ReturnValue", "database", "manual"]
      - ["java.sql", "Statement", True, "getGeneratedKeys", "()", "", "ReturnValue", "database", "manual"]
      - ["java.sql", "Statement", True, "getConnection", "()", "", "ReturnValue", "database", "manual"]
      # Package org.hibernate
      - ["org.hibernate", "Query", True, "list", "()", "", ReturnValue", "database", "manual"]
      - ["org.hibernate", "Query", True, "scroll", "", "", ReturnValue", "database", "manual"]
      - ["org.hibernate", "Query", True, "iterate", "", "", ReturnValue", "database", "manual"]
      # Package org.jooq
      - ["org.jooq", "ResultQuery", True, "fetch", "()", "", "ReturnValue", "database", "manual"]
      - ["org.jooq", "ResultQuery", True, "iterator", "()", "", "ReturnValue", "database", "manual"]
      # Package org.springframework.jdbc.object
      - ["org.springframework.jdbc.object", "SqlQuery", True, "execute", "", "", "ReturnValue", "database", "manual"]
      - ["org.springframework.jdbc.object", "SqlQuery", True, "executeByNamedParam", "", "", "ReturnValue", "database", "manual"]


  # Create a graph of parent-child relationships between threat models and their kinds
  # The left side is a kind of threat model. The right side groups the kinds together.
  - addsTo:
      pack: codeql/java-all
      extensible: threatModelGrouping
    data:
      - ["android-widget", "android"]
      - ["android-external-storage-dir", "android"]
      - ["contentprovider", "android"]
      - ["request", "remote"]
      - ["response", "remote"]
      - ["database", "local"]
      # - ["remote", "default"]

      # Not sure if these should really go in the default threat model, but we need them for tests to pass
      # - ["android-external-storage-dir", "default"]
      # - ["contentprovider", "default"]
      # - ["android-widget", "default"]
      # - ["android-web-resource-response", "default"]
      # - ["uri-path", "default"]

  # Provide a default, empty supportedThreatModel
  - addsTo:
      pack: codeql/java-all
      extensible: supportedThreatModel
    data: []
